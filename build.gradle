plugins {
    id 'java'
    id 'io.quarkus'
    id "org.sonarqube" version "5.1.0.4882"
    id 'jacoco'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    implementation "io.quarkus:quarkus-arc:${quarkusPlatformVersion}"
    implementation "io.quarkus:quarkus-jackson:${quarkusPlatformVersion}"
    implementation "io.quarkus:quarkus-rest-jackson:${quarkusPlatformVersion}"
    compileOnly 'org.jboss.forge.furnace.container:cdi-api:2.29.1.Final'
    implementation "io.quarkus:quarkus-mutiny:$quarkusPlatformVersion"
    implementation "io.quarkus:quarkus-smallrye-openapi:$quarkusPlatformVersion"
    implementation "io.quarkus:quarkus-junit5-mockito:$quarkusPlatformVersion"
    implementation "io.quarkus:quarkus-config-yaml"
    implementation "io.quarkus:quarkus-smallrye-openapi:$quarkusPlatformVersion"

    testImplementation 'io.smallrye.reactive:mutiny:2.6.1'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
    testImplementation "io.quarkus:quarkus-junit5:${quarkusPlatformVersion}"


    //Oracle connection
    implementation "io.quarkus:quarkus-hibernate-reactive-panache:$quarkusPlatformVersion"
    implementation "io.quarkus:quarkus-hibernate-reactive:$quarkusPlatformVersion"
    implementation ("io.quarkus:quarkus-reactive-oracle-client:$quarkusPlatformVersion"){
        exclude group: 'org.testcontainers', module: 'testcontainers'
    }


    //MicrosoftSqlServer connection
//    implementation "io.quarkus:quarkus-hibernate-reactive:$quarkusPlatformVersion"
//    implementation "io.quarkus:quarkus-reactive-mssql-client:$quarkusPlatformVersion"

    //MongoDB connection
    implementation ("io.quarkus:quarkus-mongodb-panache:$quarkusPlatformVersion"){
        exclude group: 'org.testcontainers', module: 'testcontainers'
    }

    //RabbitMQ connection
    //https://es.quarkus.io/guides/rabbitmq
    implementation ('io.quarkus:quarkus-messaging-rabbitmq:3.12.1'){
        exclude group: 'org.testcontainers', module: 'testcontainers'
    }



}

group 'com.my.dummy.project'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}


sonar {
    properties {

        // Exclude files from analysis
        property "sonar.exclusions", "**/infrastructure/data/sql/sqlserver/calculations/repository/**," +
                "**/infrastructure/data/sql/oracle/calculations/repository/**," +
                "**/infrastructure/data/nosql/mongo/business/repository/**," +
                "**/dto/**"

        // Java version
        property "sonar.java.source", "21"

        // Coverage report path (if you're using JaCoCo)
        property "sonar.coverage.jacoco.xmlReportPaths", "${layout.buildDirectory}/reports/jacoco/test/jacocoTestReport.xml"

        // Source and test directories
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"

        // Encoding of the source files
        property "sonar.sourceEncoding", "UTF-8"

//        property "sonar.java.binaries", "${layout.buildDirectory}/classes/java/main"
//        property "sonar.java.test.binaries", "${layout.buildDirectory}/classes/java/test"
    }
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    jvmArgs "-XX:+EnableDynamicAgentLoading"
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacoco')
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
